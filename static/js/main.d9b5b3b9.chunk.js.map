{"version":3,"sources":["components/Firebase/FirebaseConfig.js","components/Firebase/Firebase.js","components/Graph/Graph.js","components/GraphArea/GraphArea.js","components/TableContent/TableContent.js","components/DataTable/DataTable.js","components/Trends/Trends.js","components/App/App.js","serviceWorker.js","index.js"],"names":["FirebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","app","Firebase","initializeApp","auth","db","database","Graph","props","getDataFromRange","period","jsonData","sensorType","pointDate","currentDate","Date","pastDate","setDate","getDate","pointsInRange","point","setHours","substring","setMinutes","setSeconds","getTime","push","newData","i","length","newPoint","getLabel","input","graphTheThing","stateData","height","width","data","state","range","measurement","hide","type","dataKey","domain","tick","tickFormatter","value","parseFloat","toFixed","stroke","colors","strokeWidth","dot","isAnimationActive","connectNulls","labelFormatter","name","toString","signInAnonymously","catch","error","console","log","code","message","onAuthStateChanged","user","ref","on","querySnapShot","val","setState","style","this","current_state","Component","GraphArea","TableContent","recent","past","getAverage","sensor","total","totalPoints","getDelta","currentData","pastData","currentAvg","pastTotal","pastTotalPoints","j","pastAvg","change","isNaN","className","concat","getTable","rows","sensorNames","temp_data","temp_delta","moisture_data","moisture_delta","light_data","light_delta","humidity_data","humidity_delta","React","DataTable","activeTab1","toggle1","bind","tab","Card","role","outline","classnames","active","onClick","TabContent","activeTab","TabPane","tabId","Trends","mapper","num_data","avg","App","dropdownOpen","time","dropdownText","toggle","changeRange","prevState","text","id","Button","color","href","target","rel","component","transitionName","transitionAppear","transitionAppearTimeout","transitionEnter","transitionLeave","Row","Col","md","lg","CardHeader","Dropdown","isOpen","DropdownToggle","caret","DropdownMenu","DropdownItem","header","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d9b5b3b9.chunk.js","sourcesContent":["//import firebase from 'firebase'\n\n// Your web app's Firebase configuration\nconst FirebaseConfig = {\n    apiKey: \"AIzaSyAlBTx86b1Jy1ckSUmmvGhZj9ZMfpVciRo\",\n    authDomain: \"eweje-garden.firebaseapp.com\",\n    databaseURL: \"https://eweje-garden.firebaseio.com\",\n    projectId: \"eweje-garden\",\n    storageBucket: \"eweje-garden.appspot.com\",\n    //messagingSenderId: \"405772714297\",\n    //appId: \"1:405772714297:web:5d66a3e6252420938268e8\",\n    //measurementId: \"G-3G3CFQ0RH5\"\n  };\n\n//const Firebase = firebase.initializeApp(firebaseConfig)\nexport default FirebaseConfig;","import Firebase from \"firebase\";\nimport FirebaseConfig from './FirebaseConfig';\n\nconst app = Firebase.initializeApp(FirebaseConfig);\n\nexport const auth = app.auth();\nexport const db = app.database();\n","import React, {Component} from 'react';\nimport './Graph.css';\nimport {db, auth} from \"../Firebase/Firebase\";\nimport {LineChart, Line, Tooltip, XAxis, YAxis, Legend, ResponsiveContainer} from 'recharts'; \n\nclass Graph extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      range: props.range,\n      data: null,\n      colors: []\n    };\n  }\n\n  componentDidMount() {\n    auth.signInAnonymously().catch(function(error) {\n      // Handle Errors here.\n      console.log(\"Failed sign in\")\n      console.log(error.code);\n      console.log(error.message)\n      // ...\n    });\n\n    auth.onAuthStateChanged(function(user) {\n      if (user) {\n        // User is signed in.\n        //var isAnonymous = user.isAnonymous;\n        //console.log(user.uid);\n        // ...\n      } else {\n        // User is signed out.\n        // ...\n      }\n      // ...\n    });\n\n    db.ref('data').on('value', querySnapShot => {\n      let data = querySnapShot.val() ? querySnapShot.val() : {};\n      this.setState({\n        data: data,\n      });\n    });\n  }\n\n  getDataFromRange = (period, jsonData, sensorType) =>{\n    const currentDate = new Date();\n    var pastDate = new Date();\n    pastDate.setDate(currentDate.getDate() - period);\n\n    var pointDate;\n    var pointsInRange = [];\n    for (var point in jsonData){\n      pointDate = new Date(jsonData[point][\"date\"]);\n      pointDate.setHours(jsonData[point][\"time\"].substring(0,2));\n      pointDate.setMinutes(jsonData[point][\"time\"].substring(2,4));\n      pointDate.setSeconds(jsonData[point][\"time\"].substring(4));\n      if (pointDate >= pastDate && pointDate <= currentDate ){\n        jsonData[point][\"datetime\"] = pointDate.getTime();\n        pointsInRange.push(jsonData[point]);\n      }\n    }\n    var newData = [];\n    for (var i = 0; i < pointsInRange.length; i++){\n      if (pointsInRange[i][sensorType] !== \"-\"){\n        const key = pointsInRange[i][\"sensor\"];\n        var newPoint = {};\n        newPoint[key] =  pointsInRange[i][sensorType];\n        newPoint[\"datetime\"] = pointsInRange[i][\"datetime\"];\n        newData.push(newPoint);\n        //pointsInRange[i]\n      }\n    }\n    return(newData);\n    /*[{Sensor1: 77.01468, datetime: 12340982343},\n       {Sensor2: 42.01468, datetime: 32450921342},\n       ...]*/\n  }\n\n  static getDerivedStateFromProps(props, current_state) {\n    if (current_state.range !== props.range || current_state.colors !== props.colors) {\n      return {\n        range: props.range,\n        colors: props.colors\n      }\n    }\n    return null\n  }\n\n  getLabel = (input) =>{\n    const map = {\n      \"temp\": \"Temperature (\\u00B0F)\",\n      \"humidity\": \"Humidity (%)\",\n      \"soil_moisture\": \"Soil Moisture\",\n      \"light\": \"Light (lux)\"\n    };\n    return map[input]\n  }\n\n  graphTheThing = (stateData) =>{\n    return(\n      <ResponsiveContainer height=\"100%\" width=\"100%\">\n        <LineChart\n          data={this.getDataFromRange(this.state.range, stateData, this.props.measurement)} \n          //margin={{top: 5, right: 30, left: 20, bottom: 5}}\n        > \n          {/*chart is from https://recharts.org/en-US/*/}\n          <XAxis hide={true} type=\"number\" dataKey=\"datetime\" domain={['dataMin','dataMax']} tick={false}/>\n          <YAxis hide={true} domain={['dataMin','dataMax']} tick={false} tickFormatter={value => parseFloat(value).toFixed(0)} /*label={{ value: this.getLabel(this.props.measurement), angle: -90, position: 'insideLeft' }}*//>\n          <Line type=\"monotone\" dataKey=\"Sensor1\" stroke={this.state.colors[0]} strokeWidth={2} dot={false} isAnimationActive={false} connectNulls={true}/>\n          <Line type=\"monotone\" dataKey=\"Sensor2\" stroke={this.state.colors[1]} strokeWidth={2} dot={false} isAnimationActive={false} connectNulls={true}/>\n          <Line type=\"monotone\" dataKey=\"Sensor3\" stroke={this.state.colors[2]} strokeWidth={2} dot={false} isAnimationActive={false} connectNulls={true}/>\n          {/*<Legend layout=\"vertical\" align=\"right\" verticalAlign=\"top\"/>*/}\n          <Tooltip labelFormatter={(name) => (new Date(name)).toString()}/>\n        </LineChart>\n      </ResponsiveContainer>\n    )\n  }\n\n  render() {\n    return(\n      <div style={{height:\"100%\", width:\"100%\"}}>\n        {this.graphTheThing(this.state.data)}\n      </div>\n    );\n  }\n}\n\nexport default Graph;\n","import React, {Component} from 'react';\nimport './GraphArea.css';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Graph from \"../Graph/Graph\";\nimport MenuItem from '@material-ui/core/MenuItem';\n\nclass GraphArea extends Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      //range: \"Last 24 hours\",\n      range: 1,\n      measurement: null,\n      colors: []\n    };\n  }\n\n  /*handleChange = (event) => {\n    this.setState({range: event.target.range, value: event.target.value});\n  };*/\n\n  componentDidMount() {\n    this.setState({measurement: this.props.measurement})\n  }\n\n  static getDerivedStateFromProps(props, current_state) {\n    if (current_state.range !== props.range || current_state.colors !== props.colors) {\n      return {\n        range: props.range,\n        colors: props.colors\n      }\n    }\n    return null\n  }\n\n  render() {\n    return (\n      <div style={{height: 320}}>\n        <Graph colors={this.state.colors} range={this.state.range} measurement={this.state.measurement}></Graph>\n      </div>\n    );\n  }\n}\n\nexport default GraphArea;","import React, {Fragment} from 'react';\nimport {db} from \"../Firebase/Firebase\";\nimport classnames from \"classnames\";\n\nexport default class TableContent extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n        sensorNames: [],\n        temp_data: {},\n        temp_delta: {},\n        moisture_data: {},\n        moisture_delta: {},\n        humidity_data: {},\n        humidity_delta: {},\n        light_data: {},\n        light_delta: {},\n        range: {}\n  }}\n\n  componentDidMount() {\n    db.ref('data').on('value', querySnapShot => {\n      let data = querySnapShot.val() ? querySnapShot.val() : {};\n      this.setState({\n        sensorNames: '',\n        temp_data: this.getDataFromRange(0, this.props.range, data, \"temp\"),\n        temp_delta: this.getDataFromRange(this.props.range, 2*this.props.range, data, \"temp\"),\n\n        moisture_data: this.getDataFromRange(0, this.props.range, data, \"soil_moisture\"),\n        moisture_delta: this.getDataFromRange(this.props.range,2*this.props.range,data,\"soil_moisture\"),\n\n        humidity_data: this.getDataFromRange(0, this.props.range, data, \"humidity\"),\n        humidity_delta: this.getDataFromRange(this.props.range,2*this.props.range,data,\"humidity\"),\n\n        light_data: this.getDataFromRange(0, this.props.range, data, \"light\"),\n        light_delta: this.getDataFromRange(this.props.range,2*this.props.range,data,\"light\"),\n\n        range: this.props.range\n      });\n    });\n  }\n\n  getDataFromRange = (recent, past, jsonData, sensorType) =>{\n    var currentDate = new Date();\n    var pastDate = new Date();\n    pastDate.setDate(pastDate.getDate() - past);\n    currentDate.setDate(currentDate.getDate() - recent);\n\n    var pointDate;\n    var pointsInRange = [];\n    for (var point in jsonData){\n      pointDate = new Date(jsonData[point][\"date\"]);\n      pointDate.setHours(jsonData[point][\"time\"].substring(0,2));\n      pointDate.setMinutes(jsonData[point][\"time\"].substring(2,4));\n      pointDate.setSeconds(jsonData[point][\"time\"].substring(4));\n      if (pointDate >= pastDate && pointDate <= currentDate ){\n        jsonData[point][\"datetime\"] = pointDate.getTime();\n        pointsInRange.push(jsonData[point]);\n      }\n    }\n    var newData = [];\n    for (var i = 0; i < pointsInRange.length; i++){\n      if (pointsInRange[i][sensorType] !== \"-\"){\n        const key = pointsInRange[i][\"sensor\"];\n        var newPoint = {};\n        newPoint[key] =  pointsInRange[i][sensorType];\n        newPoint[\"datetime\"] = pointsInRange[i][\"datetime\"];\n        newData.push(newPoint);\n        //pointsInRange[i]\n      }\n    }\n    return(newData);\n    /*[{Sensor1: 77.01468, datetime: 12340982343},\n       {Sensor2: 42.01468, datetime: 32450921342},\n       ...]*/\n  }\n\n  getAverage = (data, sensor) => {\n    var total = 0;\n    var totalPoints = 0;\n    for(var i = 0; i < data.length; i++) {\n        if (sensor in data[i] && data[i][sensor] !== \"-\"){\n            total += data[i][sensor];\n            totalPoints += 1;\n        }\n    }\n    var avg = total / totalPoints;\n    return avg.toFixed(1);\n  }\n\n  getDelta = (currentData, pastData, sensor) => {\n    var total = 0;\n    var totalPoints = 0;\n    for(var i = 0; i < currentData.length; i++) {\n        if (sensor in currentData[i] && currentData[i][sensor] !== \"-\"){\n            total += currentData[i][sensor];\n            totalPoints += 1;\n        }\n    }\n    var currentAvg = total / totalPoints;\n\n    var pastTotal = 0;\n    var pastTotalPoints = 0;\n    for(var j = 0; j < pastData.length; j++) {\n      if (sensor in pastData[j] && pastData[j][sensor] !== \"-\"){\n          pastTotal += pastData[j][sensor];\n          pastTotalPoints += 1;\n      }\n    }\n    var pastAvg = pastTotal / pastTotalPoints;\n\n    var change = 100*(currentAvg-pastAvg)/pastAvg;\n\n    if (isNaN(change)){\n      return(<td className=\"text-center\">N/a</td>)\n    }\n    else if (change >= 0){\n      return(<td className=\"text-center text-success\">{(change).toFixed(1).toString().concat(\"%\")}</td>);\n    }\n    else{\n      return(<td className=\"text-center text-danger\">{(change).toFixed(1).toString().concat(\"%\")}</td>);\n    }\n    \n  }\n\n  static getDerivedStateFromProps(props, current_state) {\n    if (current_state.sensorNames !== props.sensorNames || current_state.range !== props.range) {\n      return {\n        range: props.range,\n        sensorNames: props.sensorNames\n      }\n    }\n    return null\n  }\n\n  getTable = () => {\n    var rows = [];\n    for (var i = 0; i < this.state.sensorNames.length; i++){\n      var sensor = this.state.sensorNames[i];\n      rows.push(\n        <tr>\n          <td className=\"text-center\">{sensor}</td>\n          <td className=\"text-center\">{this.getAverage(this.state.temp_data, sensor)}</td>\n          {this.getDelta(this.state.temp_data, this.state.temp_delta, sensor)}\n\n          <td className=\"text-center\">{this.getAverage(this.state.moisture_data, sensor)}</td>\n          {this.getDelta(this.state.moisture_data, this.state.moisture_delta, sensor)}\n\n          <td className=\"text-center\">{this.getAverage(this.state.light_data, sensor)}</td>\n          {this.getDelta(this.state.light_data, this.state.light_delta, sensor)}\n\n          <td className=\"text-center\">{this.getAverage(this.state.humidity_data, sensor)}</td>\n          {this.getDelta(this.state.humidity_data, this.state.humidity_delta, sensor)}\n\n        </tr>\n      )\n    }\n    return(\n      <Fragment>\n        {rows}\n      </Fragment>\n    )\n  }\n\n  render() {\n    return (\n        <table className=\"align-middle mb-0 table table-borderless table-striped table-hover\">\n            <thead>\n            <tr>\n                <th className=\"text-center\">Sensor</th>\n                <th className=\"text-center\">Avg. Temp</th>\n                <th className=\"text-center\">&Delta;Temp</th>\n                <th className=\"text-center\">Avg. Moisture</th>\n                <th className=\"text-center\">&Delta;Moisture</th>\n                <th className=\"text-center\">Avg. Sunlight</th>\n                <th className=\"text-center\">&Delta;Sunlight</th>\n                <th className=\"text-center\">Avg. Humidity</th>\n                <th className=\"text-center\">&Delta;Humidity</th>\n            </tr>\n            </thead>\n            <tbody>\n                {this.getTable()}\n            </tbody>\n        </table>\n    );\n  }\n}\n","import React from 'react';\nimport { Card, Button, TabContent, TabPane } from 'reactstrap';\nimport classnames from 'classnames';\nimport TableContent from \"../TableContent/TableContent\";\n\nexport default class DataTable extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n        activeTab1: '11',\n\n    };\n    this.toggle1 = this.toggle1.bind(this);\n  }\n\n  toggle1(tab) {\n    if (this.state.activeTab1 !== tab) {\n        this.setState({\n            activeTab1: tab\n        });\n        console.log(tab);\n    }\n  }\n\n  render() {\n    return (\n      <Card className=\"main-card mb-3\">\n          <div className=\"card-header\">Your Data\n              <div className=\"btn-actions-pane-right\">\n                  <div role=\"group\" className=\"btn-group-sm btn-group\">\n                      <button outline\n                              className={\"btn btn-info\"+ classnames({active: this.state.activeTab1 === '11'})}\n                              onClick={() => {\n                          this.toggle1('11');\n                      }}>24 hours</button>\n                      <button outline\n                              className={\"btn btn-info\"+ classnames({active: this.state.activeTab1 === '22'})}\n                              onClick={() => {\n                          this.toggle1('22');\n                      }}>Week</button>\n                      <button outline\n                              className={\"btn btn-info\"+ classnames({active: this.state.activeTab1 === '33'})}\n                              onClick={() => {\n                          this.toggle1('33');\n                      }}>Month</button>\n                      <button outline\n                              className={\"btn btn-info\"+ classnames({active: this.state.activeTab1 === '44'})}\n                              onClick={() => {\n                          this.toggle1('44');\n                      }}>All time</button>\n                  </div>\n              </div>\n          </div>\n          <div className=\"table-responsive\">\n            <TabContent activeTab={this.state.activeTab1}>\n            <TabPane tabId=\"11\">{/* 24 hours */}\n                <TableContent sensorNames={[\"Sensor1\", \"Sensor2\", \"Sensor3\"]} range={1}></TableContent>\n            </TabPane>\n            <TabPane tabId=\"22\">{/* Week */}\n                <TableContent sensorNames={[\"Sensor1\", \"Sensor2\", \"Sensor3\"]} range={7}></TableContent>\n            </TabPane>\n            <TabPane tabId=\"33\">{/* Month */} \n                <TableContent sensorNames={[\"Sensor1\", \"Sensor2\", \"Sensor3\"]} range={30}></TableContent>\n            </TabPane>\n            <TabPane tabId=\"44\">{/* All */}\n                <TableContent sensorNames={[\"Sensor1\", \"Sensor2\", \"Sensor3\"]} range={1000}></TableContent>\n            </TabPane>\n            </TabContent>\n                  \n          </div>\n          <div className=\"d-block text-center card-footer\">\n              <button className=\"mr-2 btn-icon btn-icon-only btn btn-outline-danger\"><i className=\"pe-7s-trash btn-icon-wrapper\"> </i></button>\n              <button className=\"btn-wide btn btn-success\">Save</button>\n          </div>\n      </Card>\n    );\n  }\n}\n","import React, {Component} from 'react';\nimport './Trends.css';\nimport {db} from \"../Firebase/Firebase\";\n\nclass Trends extends Component {\n\n  mapper = {\n    \"temp\": \"\\u00B0F\",\n    \"soil_moisture\": \"\",\n    \"humidity\": \"%\",\n    \"light\": \" lux\"\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: null,\n      avg: null,\n    };\n  }\n\n  getAverage = (measurement, data) => {\n    var num_data = [];\n    for (var point in data){\n      if (data[point][measurement] !== \"-\"){\n        num_data.push(data[point][measurement])\n      }\n    }\n    var total = 0;\n    for(var i = 0; i < num_data.length; i++) {\n        total += num_data[i];\n    }\n    var avg = total / num_data.length;\n    return avg.toFixed(1).toString().concat(this.mapper[this.props.measurement]);\n  }\n\n  componentDidMount() {\n    db.ref('data').on('value', querySnapShot => {\n      let data = querySnapShot.val() ? querySnapShot.val() : {};\n      this.setState({\n        data: data,\n        avg: this.getAverage(this.props.measurement, data)\n      });\n    });\n  }\n\n  render() {\n    return(\n      <div>\n        {this.state.avg}\n      </div>\n    );\n  }\n}\n\nexport default Trends;\n","import React, {Component, Fragment} from 'react';\nimport GraphArea from \"../GraphArea/GraphArea\"\nimport DataTable from \"../DataTable/DataTable\"\nimport './App.css';\nimport '../../assets/base.css';\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\nimport Trends from '../Trends/Trends'\nimport {\n  Row, Col,\n  Button,\n  CardHeader,\n  Card,\n  CardBody,\n  Progress,\n  TabContent,\n  TabPane, Dropdown, \n  UncontrolledButtonDropdown, \n  DropdownToggle, \n  DropdownMenu, \n  DropdownItem\n} from 'reactstrap';\n\nimport {\n  ResponsiveContainer,\n} from 'recharts';\n\n//import {Line} from 'react-chartjs-2';\n\nimport {\n  faAngleUp,\n  faArrowRight,\n  faArrowUp,\n  faArrowLeft,\n  faAngleDown\n} from '@fortawesome/free-solid-svg-icons';\n\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n        dropdownOpen: false, \n        activeTab1: '11',\n        time: 1,\n        dropdownText: \"Last 24 Hours\"\n    };\n    this.toggle = this.toggle.bind(this);\n    this.toggle1 = this.toggle1.bind(this);\n    this.changeRange = this.changeRange.bind(this);\n  }\n\n  toggle() {\n      this.setState(prevState => ({\n          dropdownOpen: !prevState.dropdownOpen\n      }));\n  }\n\n  changeRange(range, text){\n    console.log(range);//e.currentTarget.getAttribute.range);\n    this.setState({\n          time: range, //e.currentTarget.getAttribute.range,\n          dropdownOpen: !this.state.dropdownOpen,\n          dropdownText: text\n        });\n  }\n\n  toggle1(tab) {\n      if (this.state.activeTab1 !== tab) {\n          this.setState({\n              activeTab1: tab\n          });\n          console.log(tab);\n      }\n  }\n\n\n\n  render() {\n    return(\n      <div>\n        <section id=\"banner\">\n          <h1 className=\"mb-5\"><b>The Eweje Garden</b></h1>\n          <Button outline className=\"mb-3 mr-2 btn-transition\" color=\"secondary\"><a href=\"https://github.com/sopeeweje/eweje-garden\"  target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-white\">(Link to docs)</a></Button>\n        </section>\n        <Fragment>\n          <ReactCSSTransitionGroup\n              component=\"div\"\n              transitionName=\"TabsAnimation\"\n              transitionAppear={true}\n              transitionAppearTimeout={0}\n              transitionEnter={false}\n              transitionLeave={false}>\n              <div className=\"m-4\">\n                  <Row>\n                      <Col md=\"12\" lg=\"6\">{/* sm, md, lg, xl set relative break points for different size screens */}\n                          <Card className=\"mb-3\">\n                              {/* mb-3 is for margins and padding or something, from bootstrap. Most of these classes are from bootstrap, which you don't know but that's fine */}\n                              <CardHeader className=\"card-header-tab\"> {/* This is the header of the card */}\n                                  <div className=\"card-header-title\">\n                                      <i className=\"header-icon lnr-chart-bars icon-gradient bg-deep-blue\"> </i>\n                                      Live Data\n                                      {/* \n                                      lnr icon is from https://linearicons.com/ \n                                      icon bg color is from https://jspwiki-wiki.apache.org/Wiki.jsp?page=Background%20Gradients  \n                                      */}\n                                  </div>\n                                  <div className=\"btn-actions-pane-right\">\n                                    <Dropdown isOpen={this.state.dropdownOpen} toggle={this.toggle} className=\"d-inline-block\">\n                                        <DropdownToggle caret color=\"dark\">\n                                            {this.state.dropdownText}\n                                        </DropdownToggle>\n                                        <DropdownMenu>\n                                            <DropdownItem header>Time frame</DropdownItem>\n                                            <DropdownItem range={1} onClick={() => this.changeRange(1, \"Last 24 Hours\")}>Last 24 Hours</DropdownItem>\n                                            <DropdownItem range={7} onClick={() => this.changeRange(7, \"Last Week\")}>Last Week</DropdownItem>\n                                            <DropdownItem range={30} onClick={() => this.changeRange(30, \"Last Month\")}>Last Month</DropdownItem>\n                                            <DropdownItem range={10000} onClick={() => this.changeRange(10000, \"All Data\")}>All Data</DropdownItem>\n                                        </DropdownMenu>\n                                    </Dropdown>\n                                    {/* Tab buttons. Figure out how to change color to the one you want */}\n                                    <Button outline\n                                            className={\"ml-1  btn-pill btn-wide border-0 btn-transition text-white bg-grow-early\"}\n                                            onClick={() => {\n                                        this.toggle1('11');\n                                    }}>Temp</Button>\n                                    <Button outline\n                                            className={\"ml-1 btn-pill btn-wide border-0 btn-transition text-white bg-love-kiss\"} // + classnames({active: this.state.activeTab1 === '22'})\n                                            color=\"primary\" onClick={() => {\n                                        this.toggle1('22');\n                                    }}>Humidity</Button>\n                                    <Button outline\n                                            className={\"ml-1 btn-pill btn-wide border-0 btn-transition text-white bg-malibu-beach\"}\n                                            color=\"primary\" onClick={() => {\n                                        this.toggle1('33');\n                                    }}>Moisture</Button>\n                                    <Button outline\n                                            className={\"ml-1 btn-pill btn-wide border-0 btn-transition text-white bg-sunny-morning\"}\n                                            onClick={() => {\n                                        this.toggle1('44');\n                                    }}>Light</Button>\n                                  </div>\n                              </CardHeader>\n                              <TabContent activeTab={this.state.activeTab1}>\n                                  <TabPane tabId=\"11\">{/* Temperature Tab */}\n                                    <div className=\"widget-chart p-0\">\n                                        <GraphArea range={this.state.time} measurement=\"temp\" colors={[\"#196F3D\", \"#52BE80\", \"#ABEBC6\"]}></GraphArea>\n                                    </div>\n                                  </TabPane>\n                                  <TabPane tabId=\"22\">{/* Humidity Tab */}\n                                      <div className=\"widget-chart p-0\">\n                                        <GraphArea range={this.state.time} measurement=\"humidity\" colors={[\"#7B241C\", \"#C0392B\", \"#E6B0AA\"]}></GraphArea>\n                                      </div>\n                                  </TabPane>\n                                  <TabPane tabId=\"33\">{/* Moisture Tab */} \n                                      <div className=\"widget-chart p-0\">\n                                        <GraphArea range={this.state.time} measurement=\"soil_moisture\" colors={[\"#21618C\", \"#3498DB\", \"#AED6F1\"]}></GraphArea>\n                                      </div>\n                                  </TabPane>\n                                  <TabPane tabId=\"44\">{/* Light Tab */}\n                                      <div className=\"widget-chart p-0\">\n                                        <GraphArea range={this.state.time} measurement=\"light\" colors={[\"#B7950B\", \"#F4D03F\", \"#FAD7A0\"]}></GraphArea>\n                                      </div>\n                                  </TabPane>\n                              </TabContent>\n                          </Card>\n                      </Col>\n                      <Col md=\"12\" lg=\"6\">\n                          <Row>\n                              <Col md=\"6\">\n                                  {/* bg colors https://demo.uifort.com/bamburgh-admin-dashboard-pro/examples/colors.html */}\n                                  <div className=\"card mb-3 bg-sunny-morning widget-chart text-white card-border\">\n                                      <div className=\"icon-wrapper rounded-circle\">\n                                          <div className=\"icon-wrapper-bg bg-white opacity-4\"/>\n                                          <i className=\"lnr-sun\"/> {/*  icon-gradient bg-sunny-morning */}\n                                      </div>\n                                      <div className=\"widget-numbers\">\n                                          <Trends measurement=\"light\"></Trends>\n                                      </div>\n                                      <div className=\"widget-subheading\">\n                                          Avg. Sunlight\n                                      </div>\n                                  </div>\n                              </Col>\n                              <Col md=\"6\">\n                                  <div className=\"card mb-3 bg-malibu-beach widget-chart text-white card-border\">\n                                      <div className=\"icon-wrapper rounded\">\n                                          <div className=\"icon-wrapper-bg bg-white opacity-4\"/>\n                                          <i className=\"lnr-drop\"/>\n                                      </div>\n                                      <div className=\"widget-numbers\">\n                                          <Trends measurement=\"soil_moisture\"></Trends>\n                                      </div>\n                                      <div className=\"widget-subheading\">\n                                          Avg. Moisture\n                                      </div>\n                                  </div>\n                              </Col>\n                              <Col md=\"6\">\n                                  <div className=\"card mb-3 bg-grow-early widget-chart text-white card-border\">\n                                      <div className=\"icon-wrapper rounded\">\n                                          <div className=\"icon-wrapper-bg bg-white opacity-4\"/>\n                                          <i className=\"lnr-earth\"/>\n                                      </div>\n                                      <div className=\"widget-numbers\">\n                                          <Trends measurement=\"temp\"></Trends>\n                                      </div>\n                                      <div className=\"widget-subheading\">\n                                          Avg. Temperature\n                                      </div>\n                                  </div>\n                              </Col>\n                              <Col md=\"6\">\n                                  <div className=\"card mb-3 bg-love-kiss widget-chart card-border\">\n                                      <div className=\"widget-chart-content text-white\">\n                                          <div className=\"icon-wrapper rounded-circle\">\n                                              <div className=\"icon-wrapper-bg bg-white opacity-4\"/>\n                                              <i className=\"lnr-cloud\"/>\n                                          </div>\n                                          <div className=\"widget-numbers\">\n                                              <Trends measurement=\"humidity\"></Trends>\n                                          </div>\n                                          <div className=\"widget-subheading\">\n                                              Avg. Humidity\n                                          </div>\n                                      </div>\n                                  </div>\n                              </Col>\n                          </Row>\n                      </Col>\n                  </Row>\n                  <Row>\n                      <Col md=\"12\">\n                          <DataTable></DataTable>\n                      </Col>\n                  </Row>\n              </div>\n          </ReactCSSTransitionGroup>\n      </Fragment>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}